package cryptology;
import java.util.Arrays;
import java.util.Scanner;
public class AES {
	static int [][]S_BOX= {{0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76},
			{0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0},
			{0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15},
			{0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75},
			{0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84},
			{0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF},
			{0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8},
			{0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2},
			{0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73},
			{0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB},
			{0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79},
			{0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08},
			{0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A},
			{0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E},
			{0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF},
			{0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16}};
	static int [][]ANTI_S_BOX= {{0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB},
			{0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB},
			{0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E},
			{0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25},
			{0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92},
			{0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84},
			{0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06},
			{0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B},
			{0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73},
			{0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E},
			{0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B},
			{0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4},
			{0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F},
			{0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF},
			{0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61},
			{0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D}};
public static void main(String []args)
{
	System.out.println("*******************************A5/1**********************************");
	System.out.println("text和key输入可以是任何字符,规定为不大于128比特");
	System.out.println("*******************************A5/1**********************************");
	int stop=0;
	while(stop==0)
	{
		System.out.println("Please select 0加密 or 1解密:");
		   int select;
		   Scanner input0=new Scanner(System.in);
		   select=input0.nextInt();
		   System.out.println("Please input your text:");
		   Scanner input=new Scanner(System.in);
		      String text=input.nextLine();
		      int [][]TEXT=new int[4][4];
		   System.out.println("Please input your key:");  
		      Scanner input1=new Scanner(System.in);
			   String key=input1.nextLine();
			   int [][]KEY=new int[4][4];
			   StrtoHex(key,KEY);
			  if(select==0)
				  {
				  StrtoHex(text,TEXT);
				  encrypt(TEXT,KEY);
				  }
			  else
				  decode(text,KEY);
			  System.out.println("***********press 0 to continue,press 1 to stop************");
				Scanner input4=new Scanner(System.in);
			   stop=input4.nextInt();
	}
	}
public static void decode(String text,int[][]key)//解密
{
	int [][]keys=new int[44][4];
	int [][]TEXT=bintohex(text);
	for(int m=0;m<4;m++)
	System.out.println(Arrays.toString(TEXT[m]));
	keys=keyproduce(key);
	int count=10;
	keyandtext(TEXT,keys,10);
	for(int t=0;t<4;t++)
	System.out.println(Arrays.toString(TEXT[t]));
	while(count!=0)
	{
		 count--;
		for(int i=1;i<4;i++)
		hangmove(TEXT[i],i,1);
		for(int v=0;v<4;v++)
		System.out.println("hangmove"+count+Arrays.toString(TEXT[v]));
		SBOX(TEXT,1);
		for(int s=0;s<4;s++)
		System.out.println("sbox"+count+Arrays.toString(TEXT[s]));
		 keyandtext(TEXT,keys,count);
		 for(int n=0;n<4;n++)
		 System.out.println("keyandtext"+count+Arrays.toString(TEXT[n]));
		 mixture(TEXT,1);
		 for(int x=0;x<4;x++)
		 System.out.println("mixture"+count+Arrays.toString(TEXT[x]));
		
	}
	System.out.print("解码明文：");
	hextostr(TEXT);
	}
public static void encrypt(int [][]text,int [][]key)//加密
{
	int [][]keys=new int[44][4];
	keys=keyproduce(key);
	int count=1;
	keyandtext(text,keys,0);
	while(count!=11)
	{
		SBOX(text,0);
		for(int s=0;s<4;s++)
		System.out.println("sbox"+count+Arrays.toString(text[s]));
		for(int i=1;i<4;i++)
			hangmove(text[i],i,0);
		for(int v=0;v<4;v++)
		System.out.println("hangmove"+count+Arrays.toString(text[v]));
		 mixture(text,0);
		 for(int x=0;x<4;x++)
		 System.out.println("mixture"+count+Arrays.toString(text[x]));
		 keyandtext(text,keys,count);
		 for(int n=0;n<4;n++)
		 System.out.println("keyandtext"+count+Arrays.toString(text[n]));
		 count++;
		
	}
	for(int h=0;h<4;h++)
	System.out.println(Arrays.toString(text[h]));
	System.out.println("二进制： ");
	for(int j=0;j<4;j++)
		for(int l=0;l<4;l++)
			{
			for(int f=7;f>0;f--)
				if(text[j][l]>>>f==0)
					System.out.print("0");
				else break;
			System.out.print(Integer.toBinaryString(text[j][l]));
		}
	System.out.println();
	}
public static void keyandtext(int [][]hex,int [][]key,int C)//密钥和明密文的异或
{
	for(int i=0;i<4;i++)
		for(int j=0;j<4;j++)
			hex[i][j]=hex[i][j]^key[C*4+i][j];
	}
public static void StrtoHex(String str,int [][]hex){
	 char[] strChar=str.toCharArray();
	 String temp;int k=0,Hextemp;
	 int []hexx=new int[16];
		for(int i=0;i<strChar.length;i++)
   		{
			temp= Integer.toHexString(strChar[i]);
			 Hextemp=Integer.parseInt(temp,16);
			 hexx[k+1]=Hextemp&0xff;
			 hexx[k]=Hextemp>>>8;
			 k=k+2;
   	}
		for(int l=0;l<4;l++)
			for(int h=0;h<4;h++)
				hex[l][h]=hexx[h+4*l];
   }
public static  int[][] keyproduce(int [][]key)//密钥扩展
{
	int k=4,q=0;int [][]keys=new int[44][4];
	for(int j=0;j<4;j++)
		for(int l=0;l<4;l++)
			keys[j][l]=key[j][l];
	int []t=new int[4];
	while(k!=44)
	{
		q=k/4-1;
		if(k%4==0)
			{t=T(keys[k-1],q);
			for(int i=0;i<4;i++)
				keys[k][i]=keys[k-4][i]^t[i];
			}
		else 
			for(int o=0;o<4;o++)
				keys[k][o]=keys[k-4][o]^keys[k-1][o];
		k++;
	}
	return keys;
}
public static int[] T(int []w,int k)//密钥扩展的T函数
{
	int []W=new int[4];
	for(int d=0;d<4;d++)
		W[d]=w[d];
	int [][]Rcon={{0x01,0x00,0x00,0x00},{0x02,0x00,0x00,0x00},{0x04,0x00,0x00,0x00},{0x08,0x00,0x00,0x00},
			{0x10,0x00,0x00,0x00},{0x20,0x00,0x00,0x00},{0x40,0x00,0x00,0x00},{0x80,0x00,0x00,0x00},
			{0x1B,0x00,0x00,0x00},{0x36,0x00,0x00,0x00}};
	int hang;
	int lie;
	int temp;
	temp=W[0];
	for(int j=0;j<3;j++)
		W[j]=W[j+1];
	    W[3]=temp;
	for(int i=0;i<4;i++)
	{
		hang=W[i]>>>4;
        lie=W[i]&0x0f;
	    W[i]=S_BOX[hang][lie];
	}
	for(int p=0;p<4;p++)
	W[p]=W[p]^Rcon[k][p];
	return W;
}
public static void SBOX(int [][]hex,int select)//S盒
{
	
	int hang;
	int lie;
	if(select==0)
		for(int i=0;i<4;i++)
		for(int j=0;j<4;j++)
		{
			hang=hex[i][j]>>>4;
	        lie=hex[i][j]&0x0f;
			hex[i][j]=S_BOX[hang][lie];
		}
	else
		for(int k=0;k<4;k++)
			for(int l=0;l<4;l++)
			{
				hang=hex[k][l]>>>4;
		        lie=hex[k][l]&0x0f;
				hex[k][l]=ANTI_S_BOX[hang][lie];
			}
}

public static void hangmove(int []hex,int k,int select)//行移位，select决定加解密
{
	int temp;
	if(select==0)
		while(k!=0) {
		 temp=hex[3];
		for(int j=3;j>0;j--)
			hex[j]=hex[j-1];
		hex[0]=temp;
	k--;
	}
	else
		while(k!=0) {
			 temp=hex[0];
			for(int j=0;j<3;j++)
				hex[j]=hex[j+1];
			hex[3]=temp;
		k--;
		}
	}
public static int[][] mixture(int [][]hex,int select)//列混合
{
	int [][]hextemp=new int[4][4];
	if(select==0)
	{
		int [][]mix={{2,3,1,1},{1,2,3,1},{1,1,2,3},{3,1,1,2}};
	for(int i=0;i<4;i++)
		{for(int j=0;j<4;j++)
			{hextemp[i][j]=(mutlie(hex[0][j],mix[i][0]))^(mutlie(hex[1][j],mix[i][1]))^(mutlie(hex[2][j],mix[i][2]))^(mutlie(hex[3][j],mix[i][3]));
			}
		}
	}
	else 
	{
		int [][]mix={{0x0E,0x0B,0x0D,0x09},{0x09,0x0E,0x0B,0x0D},{0x0D,0x09,0x0E,0x0B},{0x0B,0x0D,0x09,0x0E}};
		for(int i=0;i<4;i++)
			{for(int j=0;j<4;j++)
				{hextemp[i][j]=(anti_mutlie(hex[0][j],mix[i][0]))^(anti_mutlie(hex[1][j],mix[i][1]))^(anti_mutlie(hex[2][j],mix[i][2]))^(anti_mutlie(hex[3][j],mix[i][3]));
				}
			}
	}
	return hextemp;
	}
public static int anti_mutlie(int i,int j)//列混合的逆乘
{
	if(j==9)
		return mutlie(mutlie(mutlie(i,2),2),2)^i;
	if(j==0x0B)
		return mutlie(mutlie(mutlie(i,2),2),2)^mutlie(i,2)^i;
	if(j==0x0D)
		return mutlie(mutlie(mutlie(i,2),2),2)^mutlie(mutlie(i,2),2)^i;
	if(j==0x0E)
		return mutlie(mutlie(mutlie(i,2),2),2)^mutlie(mutlie(i,2),2)^mutlie(i,2);
	return 0;
}
public static int mutlie(int i,int j)//列混合的乘
{
	if(j==1)
		return i;
	int f=i>>>7;
	if(j==2)
		if(f==0)
			return (i<<1)&0xff;
		else return ((i<<1)&0xff)^27;
	if(j==3)
	if(f==0)
		return ((i<<1)&0xff)^i;
		else return ((i<<1)&0xff)^27^i;
	return 0;
}
public static int[][] bintohex(String BinStr)//二进制字符串转为十六进制用于解密
{
	int length=BinStr.length();
	int []binarytext=new int[length];
	   for(int g=0;g<length;g++)
		   binarytext[g]=BinStr.charAt(g)-48;
	int []temp=new int[16];
	int [][]temp1=new int[4][4];
    for(int j=0;j<16;j++){
    	 for(int i=0;i<8;i++){
    		 if(binarytext[j*8+i]==0)
    			 continue;
    		 for(int l=0;l<8-i;l++)
    	        temp[j]+=binarytext[8*(j+1)-1-l]<<l;
    		 break;
	}	 
}
    for(int l=0;l<4;l++)
		for(int h=0;h<4;h++)
			temp1[l][h]=temp[h+4*l];
    return temp1;
}
public static void hextostr(int [][]text)//十六进制转为一开始的明文
{
	int temp;
	for(int i=0;i<4;i++)
		for(int j=0;j<4;j+=2)
		{
			temp=(text[i][j]<<8)+text[i][j+1];
			if (temp==0) continue;
			System.out.print((char)temp);
		}
	System.out.println();
	}
}
